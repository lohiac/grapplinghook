-- Core services
local Players = game:GetService("Players")
local UserInput = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Settings
local SETTINGS = {
    key = Enum.KeyCode.E,
    maxRange = 300,
    speed = 200,         
    force = 4000,          
    swingDamp = 0.1,        
    moveStrength = 250,     
    momentumKeep = 5,
    
    -- Surfaces we can grapple to
    validMaterials = {
        [Enum.Material.Brick] = true,
        [Enum.Material.Concrete] = true,
        [Enum.Material.Metal] = true,
        [Enum.Material.Wood] = true,
        [Enum.Material.Plastic] = true,
    }
}

-- Setup raycast params
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Exclude

local function setupGrapple(player)
    -- Get character stuff
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")
    local root = char:WaitForChild("HumanoidRootPart")
    local cam = workspace.CurrentCamera
    local mouse = player:GetMouse()

    -- WASD tracking
    local moveVectors = {
        [Enum.KeyCode.W] = Vector3.new(0, 0, -1),
        [Enum.KeyCode.S] = Vector3.new(0, 0, 1),
        [Enum.KeyCode.A] = Vector3.new(-1, 0, 0),
        [Enum.KeyCode.D] = Vector3.new(1, 0, 0)
    }
    local pressedKeys = {}

    -- Make the rope
    local rope = Instance.new("Beam")
    rope.Width0, rope.Width1 = 0.2, 0.2
    rope.Transparency = NumberSequence.new(0.1)
    rope.Color = ColorSequence.new(Color3.fromRGB(80, 80, 80))
    rope.TextureSpeed = 1
    rope.Texture = "rbxassetid://7549619600"
    rope.Enabled = false

    -- Rope attachments
    local att1 = Instance.new("Attachment", root)
    att1.Position = Vector3.new(0, 0.5, 0)

    local att2 = Instance.new("Attachment", workspace.Terrain)
    
    rope.Attachment0 = att1
    rope.Attachment1 = att2
    rope.Parent = root

    -- Hook visual
    local hook = Instance.new("Part")
    hook.Size = Vector3.new(0.5, 0.5, 0.5)
    hook.Anchored = true
    hook.CanCollide = false
    hook.Shape = Enum.PartType.Ball
    hook.Material = Enum.Material.Neon
    hook.BrickColor = BrickColor.new("Really red")
    hook.Transparency = 1
    hook.Parent = workspace

    -- Track grapple state
    local state = {
        isGrappling = false,
        hookPos = nil,
        velocity = nil,
        lastVel = Vector3.new(0, 0, 0)
    }

    -- Get WASD direction
    local function getMovement()
        local dir = Vector3.new(0, 0, 0)
        for key, vec in pairs(moveVectors) do
            if pressedKeys[key] then
                dir = dir + vec
            end
        end
        return dir.Magnitude > 0 and dir.Unit or dir
    end

    -- Check if we can grapple to a surface
    local function canGrapple(part)
        -- TODO: Add more surface types later
        return part 
            and part.CanCollide 
            and not part:IsDescendantOf(char)
            and part.Name ~= "HookPoint"
            and SETTINGS.validMaterials[part.Material]
    end

    local function makeVelocity()
        if state.velocity then state.velocity:Destroy() end

        local bv = Instance.new("BodyVelocity")
        bv.MaxForce = Vector3.new(1, 1, 1) * SETTINGS.force
        bv.P = 1000
        bv.Parent = root
        state.velocity = bv
    end

    -- Fire grapple
    local function grapple()
        if state.isGrappling then return end

        local mousePos = mouse.Hit.Position
        local camPos = cam.CFrame.Position
        local dir = (mousePos - camPos)
        
        if dir.Magnitude == 0 then return end
        dir = dir.Unit * SETTINGS.maxRange

        raycastParams.FilterDescendantsInstances = {char, hook}

        local hit = workspace:Raycast(camPos, dir, raycastParams)
        if hit and canGrapple(hit.Instance) then
            state.hookPos = hit.Position
            state.isGrappling = true

            -- Show visuals
            hook.Position = state.hookPos
            hook.Transparency = 0
            att2.WorldPosition = state.hookPos
            rope.Enabled = true

            makeVelocity()
            humanoid:ChangeState(Enum.HumanoidStateType.Physics)
        end
    end

    -- Stop grappling
    local function stopGrapple()
        if not state.isGrappling then return end

        state.isGrappling = false
        rope.Enabled = false
        hook.Transparency = 1

        -- Keep some momentum
        local momentum = Instance.new("BodyVelocity")
        momentum.MaxForce = Vector3.new(1, 1, 1) * SETTINGS.force
        momentum.P = 1000
        momentum.Velocity = state.lastVel * SETTINGS.momentumKeep
        momentum.Parent = root

        if state.velocity then
            state.velocity:Destroy()
            state.velocity = nil
        end

        -- Clean up momentum
        task.delay(0.5, function()
            if momentum then momentum:Destroy() end
        end)

        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end

    -- Update physics
    RunService.Heartbeat:Connect(function()
        if not state.isGrappling or not state.velocity then return end

        local toHook = state.hookPos - root.Position
        local hookDir = toHook.Unit

        -- Basic pull
        local vel = hookDir * SETTINGS.speed

        -- Add WASD movement
        local move = getMovement()
        local look = cam.CFrame.LookVector
        local right = cam.CFrame.RightVector
        local worldMove = (right * move.X + look * move.Z)
        if worldMove.Magnitude > 0 then
            vel = vel + worldMove.Unit * SETTINGS.moveStrength
        end

        state.lastVel = vel
        state.velocity.Velocity = vel
        att1.WorldPosition = root.Position + Vector3.new(0, 1, 0)
    end)

    -- Input handling
    UserInput.InputBegan:Connect(function(input, processed)
        if processed then return end

        if input.KeyCode == SETTINGS.key then
            grapple()
        end

        if moveVectors[input.KeyCode] then
            pressedKeys[input.KeyCode] = true
        end
    end)

    UserInput.InputEnded:Connect(function(input)
        if input.KeyCode == SETTINGS.key then
            stopGrapple()
        end

        if moveVectors[input.KeyCode] then
            pressedKeys[input.KeyCode] = nil
        end
    end)
end

-- Initialize
local player = Players.LocalPlayer

player.CharacterAdded:Connect(function()
    setupGrapple(player)
end)

if player.Character then
    task.spawn(function()
        setupGrapple(player)
    end)
end

-- Network event (for future use)
local GrappleEvent = Instance.new("RemoteEvent")
GrappleEvent.Name = "GrappleEvent"
GrappleEvent.Parent = ReplicatedStorage
